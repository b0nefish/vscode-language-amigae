{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Amiga E",
	"scopeName": "source.e",
	"patterns": [
		{
			"include": "#comment-one-line"
		},
		{
			"include": "#comment-block"
		},
		{
			"include": "#module-import"
		},
		{
			"include": "#module-definition"
		},
		{
			"include": "#const"
		},
		{
			"include": "#enum"
		},
		{
			"include": "#def"
		},
		{ 
			"include": "#bool-constants" 
		},		
		{ 
			"include": "#nil" 
		},
		{
			"include": "#one-line-proc-declaration"
		},		
		{
			"include": "#one-line-proc-expression"
		},		
		{
			"include": "#proc"
		},
		{
			"include": "#object"
		}
	],
	"repository": {
		"module-definition": {
			"name": "module.definition",
			"match": "\\bOPT\\s+(MODULE|EXPORT)\\b",
			"captures": {			
				"0": {"name": "keyword.module.amigae"}
			}
		},
		"module-import": {
			"name": "module.import",
			"begin": "\\b(MODULE)\\s+(?=')",
			"end": "(?<=')$",
			"beginCaptures": {			
				"1": {"name": "keyword.module.amigae"}
			},
			"patterns": [
				{ 
					"include": "#strings"
				}
			]
		},
		"const": {
			"name": "const",
			"begin":"\\bCONST\\b",
			"end":"$",
			"captures": {			
				"0": {"name": "keyword.const.amigae"}
			},
			"patterns": [
				{ 
					"include": "#const-assignment"
				}
			]
		},
		"const-assignment": {
			"name": "const.asignment",
			"begin": "(?:(?<=(?:CONST))|(?<=,)\\s*(\\w+)\\s*=)",
			"end":"(,|$)",
			"patterns": [
				{ 
					"include": "#expression"
				}
			]
		},
		"enum": {
			"name": "enum",
			"begin": "\\bENUM\\b",
			"end": "$",
			"captures": {			
				"0": {"name": "keyword.declaration.enum.amigae"}
			},
			"patterns": [
				{
					"name": "enum.constant",
					"match": "(?:(?<=(?:ENUM))|(?<=,))\\s*(\\w+)\\s*(=\\s*(\\d)\\s*)?,?",
					"captures" : {
						"1": {"name": "constant.other.enum.amigae"},
						"2": {"name": "constant.numeric.enum.amigae"}
					}
				}
			]
		},
		"def": {
			"name": "var.declaration.def",
			"begin": "\\b(DEF)\\b",
			"end": "(?=[^,])$",
			"beginCaptures" : {
				"1": {"name": "keyword.control.def.amigae"}
			},
			"patterns": [
				{
					"include": "#var-declaration"
				}
			]
		},
		"var-declaration" : {
			"name":"var.declaration",
			"begin": "\\b([_$[:alpha:]]\\w*)\\b",
			"end": "(,\\s*|$|(?=\\)))",
			"captures": {
				"1": {"name": "variable.amigae"}
			},
			"patterns": [
				{
					"name": "var.declaration.array",
					"match": "\\[(?:(\\d+)|([_$[:alpha:]]\\w*))\\]\\s*\\:\\s*\\b(ARRAY)\\b(?:\\s+\\b(OF)\\b\\s+(?:\\b(ARRAY|CHAR|LONG|INT)\\b|\\b([_$[:alpha:]]\\w*)\\b))?",
					"captures": {
						"1": {"name": "constant.numeric.amigae"},
						"2": {"name": "variable.amigae"},
						"3": {"name": "keyword.type.amigae"},
						"4": {"name": "keyword.type.amigae"},
						"5": {"name": "keyword.type.amigae"},
						"6": {"name": "entity.name.class.amigae"}
					}
				},
				{
					"name": "var.declaration.pointer",
					"match": "\\s*\\:\\s*\\b(PTR)\\b\\s+\\b(TO)\\b\\s+(?:\\b(CHAR|LONG|INT)\\b|\\b([_$[:alpha:]]\\w*)\\b)",
					"captures": {
						"1": {"name": "storage.type.uintptr.amigae"},
						"2": {"name": "keyword.type.amigae"},
						"3": {"name": "keyword.type.amigae"},
						"4": {"name": "entity.name.class.amigae"}
					}
				},
				{
					"name": "var.declaration.liststring",
					"match": "\\[(?:(\\d+)|([_$[:alpha:]]\\w*))\\]\\s*\\:\\s*\\b(LIST|STRING)\\b",
					"captures": {
						"1": {"name": "constant.numeric.amigae"},
						"2": {"name": "variable.amigae"},
						"3": {"name": "keyword.type.amigae"}
					}	
				}
			]
		},
		"var-assignment": {
			"name": "var.assignment",
			"begin": "\\b([_$[:alpha:]]\\w*)\\b\\s*:=(?=.*$)",
			"end": "$",
			"beginCaptures" : {
				"1": {"name": "variable.amigae"}
			},
			"patterns":[
				{"include": "#expression"}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#comment-one-line"
				},
				{
					"include": "#comment-block"
				},
				{ 
					"include": "#bool-constants" 
				},		
				{ 
					"include": "#nil" 
				},
				{
					"include": "#operators"
				},
				{ 
					"include": "#types"
				},
				{
					"include": "#const-numeric"
				},
				{
					"include": "#object-instantiation"
				},
				{ 
					"include": "#self" 
				},
				{
					"include": "#strings"
				},
				{
					"include": "#proc-call"
				},
				{
					"name": "keyword.control.amigae",
					"match": "\\b(BUT)\\b"
				},
				{
					"name": "sizeof.amigae",
					"match": "\\b(SIZEOF)\\s+(?:\\b(ARRAY|CHAR|LONG|INT)\\b|\\b([_$[:alpha:]]\\w*)\\b)",
					"captures": {
						"1": {"name" : "keyword.control.amigae"},
						"2": {"name" : "keyword.type.amigae"},
						"3": {"name" : "entity.name.class"}
					}
				},
				{
					"name": "variable.amigae",
					"match": "\\b[_$[:alpha:]]\\w*\\b"
				}
			]
		},
		"statement": {
				"patterns": [
				{
					"include": "#if-one-line-expression"
				},
				{
					"include": "#if-one-line-statement"
				},
				{
					"include": "#if-one-line-else"
				},				
				{
					"include": "#if-block"
				},				
				{
					"include": "#select-of-block"
				},
				{
					"include": "#select-block"
				},
				{
					"include": "#while-loop-one-line-expression"
				},
				{
					"include": "#for-loop-one-line-expression"
				},
				{
					"include": "#loop-one-line-statement"
				},
				{
					"include": "#while-loop"
				},
				{
					"include": "#for-loop"
				},
				{
					"include": "#repeat-until-loop"
				},
				{
					"include": "#repeat-until-expression"
				},
				{
					"include": "#loop-block"
				},				
				{
					"include": "#def"
				},
				{
					"include": "#var-assignment"
				},
				{
					"name": "sizeof.amigae",
					"match": "\\b(INC|DEC)\\s+([_$[:alpha:]]\\w*\\b)",
					"captures": {
						"1": {"name" : "keyword.control.amigae"},
						"2": {"name" : "variable.amigae"}
					}
				},
				{
					"name": "entity.name.goto-label",
					"match": "\\b[_$[:alpha:]]\\w*\\:"
				},
				{
					"name": "jump.amigae",
					"match": "\\b(JUMP)\\s+([_$[:alpha:]]\\w*\\b)",
					"captures": {
						"1": {"name" : "keyword.control.amigae"},
						"2": {"name" : "entity.name.goto-label"}
					}
				},
				{ 
					"include": "#expression" 
				}
			]
		},
		"comment-one-line": {
			"match": "->.*",
			"captures": {			
				"0": {"name": "comment.line"}
			}
		},
		"comment-block": {
			"name": "comment.block",
			"begin": "/\\*",
			"end": "\\*/"
		},
		"operators": {
			"patterns": [{
				"name": "keyword.operator.amigae",
				"match": "\\b(\\+|-|\\*|/|\\^|AND|OR|<|>|<>|=)\\b"
			}]
		},
		"bool-constants": {
			"patterns": [{
				"name": "constant.language.boolean",
				"match": "\\b(TRUE|FALSE)\\b"
			}]
		},		
		"nil": {
			"patterns": [{
				"name": "constant.language.nil.amigae",
				"match": "\\bNIL\\b"
			}]
		},
		"types": {
			"patterns": [{
				"name": "keyword.type.amigae",
				"match": "\\b(ARRAY|CHAR|LONG|INT)\\b"
			}]
		},
		"const-numeric": {
			"patterns": [{
				"name": "constant.numeric.amigae",
				"match": "\\b\\d+(\\.\\d+)?\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.amigae",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.amigae",
					"match": "\\\\."
				}
			]
		},
		"self": {
			"patterns": [{
				"name": "variable.language.self.amigae",
				"match": "\\bself\\.\\b"
			}]
		},
		"object-instantiation": {
			"match":"(NEW)\\s+\\b([_$[:alpha:]]\\w*)\\b",
			"captures": {
				"1": {"name": "keyword.operator.new"},
				"2": {"name": "entity.name.class"}
			}
		},
		"one-line-proc-declaration": {
			"begin": "\\b(PROC)\\b\\s+(?=.*\\b(IS|RETURN)\\b)",
			"end": "\\b(IS|RETURN)\\b",
			"beginCaptures": {
				"1": {"name": "keyword.function.amigae"}
			},
			"endCaptures": {
				"1": {"name": "keyword.function.amigae"}
			},
			"name": "onelineproc.declaration",
			"patterns": [
				{ "include": "#proc-declaration" }
			]
		},
		"one-line-proc-expression": {
			"begin": "((?<=IS)|(?<=RETURN))\\s",
			"end": "$",
			"name": "onelineproc.expressions",
			"patterns": [
				{ "include": "#statement" }
			]
		},
		"proc": {
			"begin": "\\bPROC\\b\\s+",
			"end": "\\bENDPROC\\b",
			"captures": {
				"0": {"name": "keyword.function.amigae"}
			},
			"name": "proc.expressions",
			"patterns": [
				{ "include": "#proc-declaration" },
				{
					"name": "proc.body",
					"begin" : "$",
					"end" : "^(?=\\bENDPROC\\b)",
					"patterns": [
						{
							"name": "keyword.function.amigae",
							"match": "\\bEXCEPT\\b"
						},
						{ "include": "#statement" }
					 ]
				}
			]
		},
		"proc-declaration": {
			"name": "proc.declaration",
			"begin": "\\b(\\w+)\\(",
			"end": "\\)(?:\\s+(OF)\\s+\\b(\\w+)\\b)?(?:\\s+\\b(HANDLE)\\b)?",
			"beginCaptures": {
				"1": {"name": "entity.name.function.amigae"}
			},
			"endCaptures": {
				"1": {"name": "keyword.type.amigae"},
				"2": {"name": "entity.name.class.amigae"},
				"3": {"name": "keyword.function.amigae"}
			},
			"patterns": [
				{
					"name": "proc.declaration.arguments",
					"begin" : "(?:(?<=\\()|(?<=,))",
					"end" : "(?:(?=\\)|,))",
					"patterns": [
						{ "include": "#var-declaration" }
					 ]
				}
			]
		},
		"object": {
			"begin": "\\b((?:EXPORT )?OBJECT)\\s+\\b(\\w+)\\b",
			"end": "\\b(ENDOBJECT)\\b",
			"beginCaptures": {
				"1": {"name": "keyword.declaration.class.amigae"},
				"2": {"name": "entity.name.class.amigae"}
			},
			"endCaptures": {
				"0": {"name": "keyword.declaration.class.amigae"}
			},
			"name": "object.expressions",
			"patterns": [
				{
					"name": "storage.modifier.amigae",
					"match": "\\b(PRIVATE|PUBLIC)\\b"
				},
				{ "include": "#var-declaration" }
			]	
		},
		"proc-call" : {
			"name": "proc.call",
			"begin": "(?:([_$[:alpha:]]\\w*)\\.)?\\b([_$[:alpha:]]\\w*)\\b(\\()",
			"end": "(\\))",
			"beginCaptures": {			
				"1": {"name": "variable.amigae"},
				"2": {"name": "entity.name.function.amigae"},
				"3": {"name": "punctuation.definition.begin.bracket.round.amigae"}
			},
			"endCaptures": {
				"1": {"name":"punctuation.definition.end.bracket.round"}
			},
			"patterns" : [
				{
					"begin" : "(?:(?<=\\()|(?<=,))",
					"end" : "(?:(?=\\)|,))",
					"name": "proc.arguments",
					"patterns" : [
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"if-one-line-expression": {
			"begin" : "\\bIF\\b(?=.*\\bTHEN\\b)",
			"end" : "\\bTHEN\\b",
			"captures": {"0": {"name": "keyword.control.amigae"}},
			"name":"if.oneline.expression",
			"patterns":[
				{
					"include": "#expression"
				}
			]
		},
		"if-one-line-statement": {
			"begin": "(?<=THEN)\\s",
			"end": "((?=ELSE)|$)",
			"captures": {
				"1": {"name": "keyword.control.amigae"}
			},
			"name": "if.oneline.statement",
			"patterns": [
				{ "include": "#statement" }
			]
		},
		"if-one-line-else": {
			"begin": "ELSE\\s",
			"end": "$",
			"captures": {
				"0": {"name": "keyword.control.amigae"}
			},
			"name": "if.oneline.else",
			"patterns": [
				{ "include": "#statement" }
			]
		},
		"if-block": {
			"begin" : "\\bIF\\b",
			"end" : "\\bENDIF\\b",
			"captures": {"0": {"name": "keyword.control.amigae"}},
			"name":"if.block",
			"patterns":[
				{
					"name":"if.block.expressions",
					"begin" : "(?<=IF)",
					"end" : "$",
					"patterns":[
						{ "include": "#expression" }
					]
				},
				{
					"name": "if.block.statements",
					"begin" : "\\n",
					"end" : "((?=\\bENDIF\\b)|(?=\\bELSEIF\\b)|(?=\\bELSE\\b))",
					"patterns": [
						{ "include": "#statement" }
					]
				},
				{
					"name": "if.block.elseif",
					"begin" : "ELSEIF",
					"end" : "((?=\\bENDIF\\b)|(?=\\bELSEIF\\b)|(?=\\bELSE\\b))",
					"captures": {"0": {"name":"keyword.control.amigae"}},
					"patterns": [
						{ "include": "#statement" }
					]
				},
				{
					"name": "if.block.else",
					"begin" : "ELSE",
					"end" : "(?=\\bENDIF\\b)",
					"captures": {"0": {"name":"keyword.control.amigae"}},
					"patterns": [
						{ "include": "#statement" }
					]
				}
			]
		},
		"select-block": {
			"begin" : "\\bSELECT\\s+([_$[:alpha:]]\\w*)\\b",
			"end" : "\\bENDSELECT\\b",
			"captures": {"0": {"name": "keyword.control.amigae"}},
			"name":"select.block",
			"patterns":[
				{
					"name":"select.case.expressions",
					"begin" : "\\bCASE\\b",
					"captures": {"0": {"name": "keyword.control.amigae"}},
					"end" : "$",
					"patterns":[
						{ "include": "#expression" }
					]
				},
				{
					"name": "select.block.statements",
					"begin" : "\\n",
					"end" : "((?=\\bCASE\\b)|(?=\\bDEFAULT\\b)|(?=\\bENDSELECT\\b))",
					"patterns": [
						{ "include": "#statement" }
					]
				},				
				{
					"name": "select.block.default",
					"begin" : "DEFAULT",
					"end" : "(?=\\bENDSELECT\\b)",
					"captures": {"0": {"name":"keyword.control.amigae"}},
					"patterns": [
						{ "include": "#statement" }
					]
				}
			]
		},
		"select-of-block": {
			"begin" : "\\b(SELECT)\\s+(?:(\\d+)|([_$[:alpha:]]\\w*))\\s+\\b(OF)\\b",
			"end" : "\\b(ENDSELECT)\\b",
			"beginCaptures": {
				"1": {"name": "keyword.control.amigae"},
				"2": {"name": "constant.numeric.amigae"},
				"3": {"name": "variable.amigae"},
				"4": {"name": "keyword.control.amigae"}
			},
			"endCaptures": {
				"0": {"name": "keyword.control.amigae"}
			},
			"name":"selectof.block",
			"patterns":[
				{
					"name":"select.block.expressions",
					"begin" : "(?<=OF)",
					"end" : "$",
					"captures": {"0": {"name": "keyword.control.amigae"}},
					"patterns":[
						{ "include": "#expression" }
					]
				},
				{
					"name":"select.case.expressions",
					"begin" : "\\bCASE\\b",
					"end" : "$",
					"captures": {"0": {"name": "keyword.control.amigae"}},
					"patterns":[
						{
							"name":"select.case.expression",
							"match": "(?:(?<=CASE)|(?<=,))\\s(?:(\\d+)|([_$[:alpha:]]\\w*))(?:\\s+(TO)\\s+(?:(\\d+)|([_$[:alpha:]]\\w*)))?,?",
							"captures": {
								"1": {"name": "keyword.constant.numeric.amigae"},
								"2": {"name": "variable.amigae"},
								"3": {"name": "keyword.control.amigae"},
								"4": {"name": "keyword.constant.numeric.amigae"},
								"5": {"name": "variable.amigae"}
							}
						}
					]
				},
				{
					"name": "select.block.statements",
					"begin" : "\\n",
					"end" : "((?=\\bCASE\\b)|(?=\\bDEFAULT\\b)|(?=\\bENDSELECT\\b))",
					"patterns": [
						{ "include": "#statement" }
					]
				},				
				{
					"name": "select.block.default",
					"begin" : "DEFAULT",
					"end" : "(?=\\bENDSELECT\\b)",
					"captures": {"0": {"name":"keyword.control.amigae"}},
					"patterns": [
						{ "include": "#statement" }
					]
				}
			]
		},
		"while-loop-one-line-expression": {
			"begin" : "\\bWHILE\\b\\s+(?=.*\\bDO\\b)",
			"end" : "\\bDO\\b",
			"captures": {"0": {"name": "keyword.control.amigae"}},
			"name":"while.oneline.expression",
			"patterns":[
				{
					"include": "#expression"
				}
			]
		},
		"loop-one-line-statement": {
			"begin": "(?<=(DO))\\s",
			"end": "$",
			"name": "loop.oneline.statement",
			"patterns": [
				{ "include": "#statement" }
			]
		},
		"while-loop": {
			"name": "while.loop",
			"begin": "\\b(WHILE)\\b",
			"end": "\\b(ENDWHILE)\\b",
			"captures": {"0": {"name": "keyword.control.amigae"}},			
			"patterns":[
				{
					"name":"while.expressions",
					"begin" : "(?<=WHILE)",
					"end" : "$",
					"patterns":[
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "while.statements",
					"begin" : "\\n",
					"end" : "^\\s*(?=\\bENDWHILE\\b)",
					"patterns": [
						{ "include": "#loop-exit" },
						{ "include": "#statement" }
					]
				}
			]
		},		
		"for-loop-one-line-expression": {
			"begin" : "\\FOR\\b(?=.*\\bDO\\b)",
			"end" : "\\bDO\\b",
			"captures": {"0": {"name": "keyword.control.amigae"}},
			"name":"for.oneline.expression",
			"patterns":[
				{
					"include": "#for-loop-expression-a"
				},
				{
					"name":"for.expression.b",
					"begin" : "(?<=TO)\\s+",
					"end" : "(?=\\bDO\\b)",
					"patterns":[
						{
							"include": "#expression"
						}
					]
				}
			]
		},	
		"for-loop": {
			"name": "for.loop",
			"begin": "\\b(FOR)\\b",
			"end": "\\b(ENDFOR)\\b",
			"captures": {"0": {"name": "keyword.control.amigae"}},	
			"patterns":[
				{
					"name":"for.expressions",
					"begin" : "(?<=FOR)",
					"end" : "$",
					"patterns":[
						{
							"include": "#for-loop-expression-a"
						},
						{
							"name":"for.expression.b",
							"begin" : "(?<=TO)\\s+",
							"end" : "(?=$)",
							"patterns":[
								{
									"include": "#expression"
								}
							]
						}
					]
				},				
				{
					"name": "for.statements",
					"begin" : "\\n",
					"end" : "^\\s*(?=\\bENDFOR\\b)",
					"patterns": [
						{ "include": "#loop-exit" },
						{ "include": "#statement" }
					 ]
				}			
			]
		},
		"for-loop-expression-a": {
			"name":"for.expression.a",
			"match" : "(?<=FOR)\\s+\\b([_$[:alpha:]]\\w*)\\b\\s*:=\\s*\\b(\\d+(?:\\.\\d+)?)\\s+\\b(TO)\\b",
			"captures": {
				"1": {"name": "variable.amigae"},
				"2": {"name": "constant.numeric.amigae"},
				"3": {"name": "keyword.control.amigae"}
			}
		},
		"repeat-until-loop":{
			"name": "repeat.loop",
			"begin": "\\bREPEAT\\b\\s*$",
			"end": "\\bUNTIL\\b",
			"captures" : {"0": {"name": "keyword.control.amigae"}},
			"patterns": [
				{ "include": "#statement" }
		 	]
		},
		"repeat-until-expression":{
			"name":"until.expression",
			"begin" : "(?<=UNTIL)\\s+",
			"end" : "(?=$)",
			"patterns": [
				{ "include": "#expression" }
		 	]
		},
		"loop-block":{
			"name": "loop.block",
			"begin": "\\bLOOP\\b",
			"end": "\\bENDLOOP\\b",
			"captures" : {"0": {"name": "keyword.control.amigae"}},
			"patterns": [
				{ "include": "#statement" }
		 	]
		},
		"loop-exit": {
			"name": "loop.exit",
			"begin" : "\\bEXIT\\b",
			"end" : "$",
			"captures": {"0":{"name":"keyword.control.amigae"}},
			"patterns": [
				{ "include": "#expression" }
			]
		}
	}
}