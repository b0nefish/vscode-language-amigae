{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Amiga E",
	"scopeName": "source.e",
	"patterns": [
		{
			"include": "#comment-one-line"
		},
		{
			"include": "#comment-block"
		},
		{
			"include": "#module-import"
		},
		{
			"include": "#module-definition"
		},
		{
			"include": "#const"
		},
		{
			"include": "#enum"
		},
		{ 
			"include": "#nil" 
		},
		{
			"include": "#one-line-proc-declaration"
		},		
		{
			"include": "#one-line-proc-expression"
		},		
		{
			"include": "#proc"
		},
		{
			"include": "#object"
		}
	],
	"repository": {
		"module-definition": {
			"name": "module.definition",
			"match": "\\bOPT\\s+MODULE\\b",
			"captures": {			
				"0": {"name": "keyword.module.amigae"}
			}
		},
		"module-import": {
			"name": "module.import",
			"begin": "\\b(MODULE)\\s+(?=')",
			"end": "(?<=')$",
			"beginCaptures": {			
				"1": {"name": "keyword.module.amigae"}
			},
			"patterns": [
				{ 
					"include": "#strings"
				}
			]
		},
		"const": {
			"name": "const",
			"begin":"\\bCONST\\b",
			"end":"$",
			"captures": {			
				"0": {"name": "keyword.const.amigae"}
			},
			"patterns": [
				{ 
					"include": "#const-assignment"
				}
			]
		},
		"const-assignment": {
			"name": "const.asignment",
			"begin": "(?:(?<=(?:CONST))|(?<=,)\\s*(\\w+)\\s*=)",
			"end":"(,|$)",
			"patterns": [
				{ 
					"include": "#expression"
				}
			]
		},
		"enum": {
			"name": "enum",
			"begin": "\\bENUM\\b",
			"end": "$",
			"captures": {			
				"0": {"name": "keyword.declaration.enum.amigae"}
			},
			"patterns": [
				{ 
					"include": "#enum-constant"
				}
			]
		},
		"enum-constant": {
			"name": "enum.constant",
			"match": "(?:(?<=(?:ENUM))|(?<=,))\\s*(\\w+)\\s*(=\\s*(\\d)\\s*)?,?",
			"captures" : {
				"1": {"name": "constant.other.enum.amigae"},
				"2": {"name": "constant.numeric.enum.amigae"}
			}
		},
		"var-declaration": {
			"name": "var.declaration.def",
			"begin": "\\b(DEF)\\b",
			"end": "(?=[^,])$",
			"beginCaptures" : {
				"1": {"name": "keyword.control.def.amigae"}
			},
			"patterns": [
				{
					"name":"var.declaration",
					"begin": "\\b([_$[:alpha:]]\\w*)\\b",
					"end": "(,\\s*|$)",
					"captures": {
						"1": {"name": "variable.amigae"}
					},
					"patterns": [
						{
							"include":"#array-declaration"
						},
						{
							"include":"#pointer-declaration"
						},
						{
							"include":"#list-string-declaration"
						}		
					]
				}
			]
		},
		"array-declaration": {
			"name": "var.declaration.array",
			"match": "\\[(?:(\\d+)|([_$[:alpha:]]\\w*))\\]\\s*\\:\\s*\\b(ARRAY)\\b(?:\\s+\\b(OF)\\b\\s+(?:\\b(ARRAY|CHAR|LONG|INT)\\b|\\b([_$[:alpha:]]\\w*)\\b))?",
			"captures": {
				"1": {"name": "constant.numeric.amigae"},
				"2": {"name": "variable.amigae"},
				"3": {"name": "keyword.type.amigae"},
				"4": {"name": "keyword.control.amigae"},
				"5": {"name": "keyword.type.amigae"},
				"6": {"name": "entity.name.class.amigae"}
			}
		},
		"pointer-declaration": {
			"name": "var.declaration.pointer",
			"match": "\\s*\\:\\s*\\b(PTR)\\b\\s+\\b(TO)\\b\\s+(?:\\b(CHAR|LONG|INT)\\b|\\b([_$[:alpha:]]\\w*)\\b)",
			"captures": {
				"1": {"name": "storage.type.uintptr.amigae"},
				"2": {"name": "keyword.control.amigae"},
				"3": {"name": "keyword.type.amigae"},
				"4": {"name": "entity.name.class.amigae"}
			}
		},
		"list-string-declaration": {
			"name": "var.declaration.array",
			"match": "\\[(?:(\\d+)|([_$[:alpha:]]\\w*))\\]\\s*\\:\\s*\\b(LIST|STRING)\\b",
			"captures": {
				"1": {"name": "constant.numeric.amigae"},
				"2": {"name": "variable.amigae"},
				"3": {"name": "keyword.type.amigae"}
			}
		},
		"var-assignment": {
			"name": "var.assignment",
			"begin": "\\b([_$[:alpha:]]\\w*)\\b\\s*:=(?=.*$)",
			"end": "$",
			"beginCaptures" : {
				"1": {"name": "variable.amigae"}
			},
			"patterns":[
				{"include": "#expression"}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#comment-one-line"
				},
				{
					"include": "#comment-block"
				},
				{ 
					"include": "#nil" 
				},
				{
					"include": "#operators"
				},
				{ 
					"include": "#types"
				},
				{
					"include": "#const-numeric"
				},
				{
					"include": "#object-instantiation"
				},
				{ 
					"include": "#self" 
				},
				{
					"include": "#strings"
				},
				{
					"include": "#proc-call"
				},
				{
					"name": "variable.amigae",
					"match": "\\b[_$[:alpha:]]\\w*\\b"
				}
			]
		},
		"statement": {
				"patterns": [
				{
					"include": "#if-one-line-expression"
				},
				{
					"include": "#if-one-line-statement"
				},
				{
					"include": "#if-block"
				},				
				{
					"include": "#while-loop-one-line-expression"
				},
				{
					"include": "#for-loop-one-line-expression"
				},
				{
					"include": "#loop-one-line-statement"
				},
				{
					"include": "#while-loop"
				},
				{
					"include": "#for-loop"
				},
				{
					"include": "#repeat-until-loop"
				},
				{
					"include": "#repeat-until-expression"
				},
				{
					"include": "#var-declaration"
				},
				{
					"include": "#var-assignment"
				},
				{ 
					"include": "#expression" 
				}
			]
		},
		"comment-one-line": {
			"match": "->.*",
			"captures": {			
				"0": {"name": "comment.line"}
			}
		},
		"comment-block": {
			"name": "comment.block",
			"begin": "/\\*",
			"end": "\\*/"
		},
		"operators": {
			"patterns": [{
				"name": "keyword.operator.amigae",
				"match": "\\b(\\+|-|\\*|/|\\^|AND|OR|<|>|<>|=)\\b"
			}]
		},
		"nil": {
			"patterns": [{
				"name": "constant.language.nil.amigae",
				"match": "\\bNIL\\b"
			}]
		},
		"types": {
			"patterns": [{
				"name": "keyword.type.amigae",
				"match": "\\b(ARRAY|CHAR|LONG|INT)\\b"
			}]
		},
		"const-numeric": {
			"patterns": [{
				"name": "constant.numeric.amigae",
				"match": "\\b\\d+(\\.\\d+)?\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.amigae",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.amigae",
					"match": "\\\\."
				}
			]
		},
		"self": {
			"patterns": [{
				"name": "variable.language.self.amigae",
				"match": "self\\."
			}]
		},
		"object-instantiation": {
			"match":"(NEW)\\s+\\b([_$[:alpha:]]\\w*)\\b",
			"captures": {
				"1": {"name": "keyword.operator.new"},
				"2": {"name": "entity.name.class"}
			}
		},
		"one-line-proc-declaration": {
			"begin": "\\b(PROC)\\b\\s+(?=.*\\b(IS|RETURN)\\b)",
			"end": "\\b(IS|RETURN)\\b",
			"beginCaptures": {
				"1": {"name": "keyword.function.amigae"}
			},
			"endCaptures": {
				"1": {"name": "keyword.function.amigae"}
			},
			"name": "onelineproc.declaration",
			"patterns": [
				{ "include": "#proc-declaration" }
			]
		},
		"one-line-proc-expression": {
			"begin": "((?<=IS)|(?<=RETURN))\\s",
			"end": "$",
			"name": "onelineproc.expressions",
			"patterns": [
				{ "include": "#statement" }
			]
		},
		"proc": {
			"begin": "\\bPROC\\b\\s+",
			"end": "\\bENDPROC\\b",
			"captures": {
				"0": {"name": "keyword.function.amigae"}
			},
			"name": "proc.expressions",
			"patterns": [
				{ "include": "#proc-declaration" },
				{ "include": "#proc-body" }
			]
		},
		"proc-declaration": {
			"name": "proc.declaration",
			"begin": "\\b(\\w+)\\(",
			"end": "\\)\\s*(?:(OF)\\s+\\b(\\w+)\\b)?",
			"beginCaptures": {
				"1": {"name": "entity.name.function.amigae"}
			},
			"endCaptures": {
				"1": {"name": "keyword.type.amigae"},
				"2": {"name": "entity.name.class.amigae"}
			},
			"patterns": [
				{ "include": "#proc-declaration-arguments" }
			]
		},
		"proc-declaration-arguments": {
			"name": "proc.declaration.arguments",
			"begin" : "(?:(?<=\\()|(?<=,))",
			"end" : "(?:(?=\\)|,))",
			"patterns": [
				{ "include": "#argument-declaration" }
		 	]
		},		
		"proc-body": {
			"name": "proc.body",
			"begin" : "$",
			"end" : "^(?=\\bENDPROC\\b)",
			"patterns": [
				{ "include": "#statement" }
		 	]
		},
		"object": {
			"begin": "\\b((?:EXPORT )?OBJECT)\\s+\\b(\\w+)\\b",
			"end": "\\b(ENDOBJECT)\\b",
			"beginCaptures": {
				"1": {"name": "keyword.declaration.class.amigae"},
				"2": {"name": "entity.name.class.amigae"}
			},
			"endCaptures": {
				"0": {"name": "keyword.declaration.class.amigae"}
			},
			"name": "object.expressions",
			"patterns": [
				{ "include": "#object.member" }
			]	
		},
		"object.member":{
			"name": "object.member",
			"begin": "\\b(PRIVATE\\s+)?(?=\\b)",
			"end": "\\n",
			"beginCaptures": {			
				"1": {"name": "storage.modifier.amigae"}
			},
			"patterns": [
				{ "include": "#argument-declaration" }
			]
		},
		"argument-declaration":{
			"name": "argument.declaration",
			"match": "\\s*\\b([_$[:alpha:]]\\w*)(?:(:PTR\\s+TO\\s+)?(?:\\b(ARRAY|CHAR|LONG|INT)\\b|\\b([_$[:alpha:]]\\w*)\\b))?(?:\\s*\\=(\\d.?\\d?))?",
			"captures": {			
				"1": {"name": "variable.other.member.amigae"},
				"2": {"name": "keyword.control.amigae"},
				"3": {"name": "keyword.type.amigae"},
				"4": {"name": "entity.name.class.amigae"},
				"5": {"name": "constant.numeric.amigae"}
			}
		},
		"proc-call" : {
			"name": "proc.call",
			"begin": "(?:([_$[:alpha:]]\\w*)\\.)?\\b([_$[:alpha:]]\\w*)\\b(\\()",
			"end": "(\\))",
			"beginCaptures": {			
				"1": {"name": "variable.amigae"},
				"2": {"name": "entity.name.function.amigae"},
				"3": {"name": "punctuation.definition.begin.bracket.round.amigae"}
			},
			"endCaptures": {
				"1": {"name":"punctuation.definition.end.bracket.round"}
			},
			"patterns" : [
				{
					"include": "#proc-arguments"
				}
			]
		},
		"proc-arguments" : {
			"begin" : "(?:(?<=\\()|(?<=,))",
			"end" : "(?:(?=\\)|,))",
			"name": "proc.arguments",
			"patterns" : [
				{
					"include": "#expression"
				}
			]
		},
		"if-one-line-expression": {
			"begin" : "\\bIF\\b(?=.*\\bTHEN\\b)",
			"end" : "\\bTHEN\\b",
			"captures": {"0": {"name": "keyword.control.amigae"}},
			"name":"if.oneline.expression",
			"patterns":[
				{
					"include": "#expression"
				}
			]
		},
		"if-one-line-statement": {
			"begin": "((?<=THEN)|(ELSE))\\s",
			"end": "$",
			"beginCaptures": {
				"1": {"name": "keyword.control.amigae"}
			},
			"name": "if.oneline.statement",
			"patterns": [
				{ "include": "#statement" }
			]
		},
		"if-block": {
			"begin" : "\\b(IF|ELSE)\\b",
			"end" : "\\bENDIF\\b",
			"captures": {"0": {"name": "keyword.control.amigae"}},
			"name":"if.block",
			"patterns":[
				{
					"include": "#if-block-expressions"
				},
				{
					"include": "#if-block-statements"
				}
			]
		},
		"if-block-expressions": {
			"name":"if.block.expressions",
			"begin" : "((?<=IF)|(?<=ELSE))",
			"end" : "$",
			"patterns":[
				{
					"include": "#expression"
				}
			]
		},
		"if-block-statements": {
			"name": "if.block.statements",
			"begin" : "\\n",
			"end" : "^\\s*(?=\\bENDIF\\b)",
			"patterns": [
				{ "include": "#statement" }
		 	]
		},
		"while-loop-one-line-expression": {
			"begin" : "\\bWHILE\\b\\s+(?=.*\\bDO\\b)",
			"end" : "\\bDO\\b",
			"captures": {"0": {"name": "keyword.control.amigae"}},
			"name":"while.oneline.expression",
			"patterns":[
				{
					"include": "#expression"
				}
			]
		},
		"loop-one-line-statement": {
			"begin": "(?<=(DO))\\s",
			"end": "$",
			"name": "loop.oneline.statement",
			"patterns": [
				{ "include": "#statement" }
			]
		},
		"while-loop": {
			"name": "while.loop",
			"begin": "\\b(WHILE)\\b",
			"end": "\\b(ENDWHILE)\\b",
			"captures": {"0": {"name": "keyword.control.amigae"}},			
			"patterns":[
				{
					"include": "#while-loop-expressions"
				},
				{
					"include": "#while-loop-statements"
				}
			]
		},
		"while-loop-expressions": {
			"name":"while.expressions",
			"begin" : "(?<=WHILE)",
			"end" : "$",
			"patterns":[
				{
					"include": "#expression"
				}
			]
		},
		"while-loop-statements": {
			"name": "while.statements",
			"begin" : "\\n",
			"end" : "^\\s*(?=\\bENDWHILE\\b)",
			"patterns": [
				{ "include": "#statement" }
		 	]
		},
		"for-loop-one-line-expression": {
			"begin" : "\\FOR\\b(?=.*\\bDO\\b)",
			"end" : "\\bDO\\b",
			"captures": {"0": {"name": "keyword.control.amigae"}},
			"name":"for.oneline.expression",
			"patterns":[
				{
					"include": "#for-loop-expression-a"
				},
				{
					"name":"for.expression.b",
					"begin" : "(?<=TO)\\s+",
					"end" : "(?=\\bDO\\b)",
					"patterns":[
						{
							"include": "#expression"
						}
					]
				}
			]
		},	
		"for-loop": {
			"name": "for.loop",
			"begin": "\\b(FOR)\\b",
			"end": "\\b(ENDFOR)\\b",
			"captures": {"0": {"name": "keyword.control.amigae"}},	
			"patterns":[
				{
					"name":"for.expressions",
					"begin" : "(?<=FOR)",
					"end" : "$",
					"patterns":[
						{
							"include": "#for-loop-expression-a"
						},
						{
							"name":"for.expression.b",
							"begin" : "(?<=TO)\\s+",
							"end" : "(?=$)",
							"patterns":[
								{
									"include": "#expression"
								}
							]
						}
					]
				},
				{
					"name": "for.statements",
					"begin" : "\\n",
					"end" : "^\\s*(?=\\bENDFOR\\b)",
					"patterns": [
						{ "include": "#statement" }
					 ]
				}			
			]
		},
		"for-loop-expression-a": {
			"name":"for.expression.a",
			"match" : "(?<=FOR)\\s+\\b([_$[:alpha:]]\\w*)\\b\\s*:=\\s*\\b(\\d+(?:\\.\\d+)?)\\s+\\b(TO)\\b",
			"captures": {
				"1": {"name": "variable.amigae"},
				"2": {"name": "constant.numeric.amigae"},
				"3": {"name": "keyword.control.amigae"}
			}
		},
		"repeat-until-loop":{
			"name": "repeat.loop",
			"begin": "\\bREPEAT\\b\\s*$",
			"end": "\\bUNTIL\\b",
			"captures" : {"0": {"name": "keyword.control.amigae"}},
			"patterns": [
				{ "include": "#statement" }
		 	]
		},
		"repeat-until-expression":{
			"name":"until.expression",
			"begin" : "(?<=UNTIL)\\s+",
			"end" : "(?=$)",
			"patterns": [
				{ "include": "#expression" }
		 	]
		}
	}
}